select * from Emp order by Deptno asc, job desc;


select to_char (sysdate,'DD-MONTH-YYYY') FROM dual;
select to_char (TO_DATE('24-jul-2014', 'DD-MON-RRRR')) FROM dual;
select to_char (sysdate,'DDspth " Day of " MMspth " Month of " YEAR') FROM dual;

DD- Day of month
MM- Month (Number)
MON- Month (first 3 characters)
Month- Full spelling
YYYY- Year in 4 digits
YEAR- Year in words

hh- hours
mm-minutes
ss- seconds

select sysdate from dual;

select * from Emp where to_char(hiredate,'MM')=09;
select * from Emp where to_char(hiredate,'YYYY') BETWEEN 1981 AND 1982 ORDER BY HIREDATE DESC;
select ename, to_char(hiredate, 'MONTH YY') AS "Joining Month" from emp;
select ename, sal from emp where to_number ('1,400', '9,000')<sal;

select to_char(5400,'$9,999.00') from dual;
select to_number('5,400','9,999.00') from dual;


single row function
select upper (ename) from emp;
select * from Emp order by Deptno asc, job desc;


select to_char (sysdate,'DD-MONTH-YYYY') FROM dual;
select to_char (TO_DATE('24-jul-2014', 'DD-MON-RRRR')) FROM dual;
select to_char (sysdate,'DDspth " Day of " MMspth " Month of " YEAR') FROM dual;

DD- Day of month
MM- Month (Number)
MON- Month (first 3 characters)
Month- Full spelling
YYYY- Year in 4 digits
YEAR- Year in words

hh- hours
mm-minutes
ss- seconds

select sysdate from dual;

select * from Emp where to_char(hiredate,'MM')=09;
select * from Emp where to_char(hiredate,'YYYY') BETWEEN 1981 AND 1982 ORDER BY HIREDATE DESC;
select ename, to_char(hiredate, 'MONTH YY') AS "Joining Month" from emp;
select ename, sal from emp where to_number ('1,400', '9,000')<sal;

select to_char(5400,'$9,999.00') from dual;
select to_number('5,400','9,999.00') from dual;


single row function
select upper (ename) from emp;
select ename, rpad(sal, 10, '*') from emp;
select ename, lpad(sal, 10, '*') from emp;
select Initcap(ename), lpad(sal, 10, '*') from emp;


multiple row function\
select count (*) from emp;
select sum (sal) from emp;
select min (sal), max (sal) from emp;
select least (sal), max (sal) from emp;
select initcap (concat(concat(ename,' ')), job)) from Emp;
multiple row function
select count (*) from emp;

number function


Date function
SELECT HIREDATE, ROUND(HIREDATE,'YEAR') FROM EMP; -ROUND UP OF DATE
SELECT ename, HIREDATE, ADD_MONTHS (HIREDATE, '36') AS END_DATE FROM emp order by end_date desc;
select ename, sal, nvl(comm,0), sal+nvl(comm,0) as Net_Income from emp;

analytical 

select ename, sal, dense_rank() over (order by sal desc) as ERANK from emp;

general and condition


join

equi joiin

select * from dept, emp where emp.deptno=dept.deptno;
or
select ename, dname from emp e join dept d on (e.deptno=d.deptno)

non  equi join
select ename, grade from emp e, salgrade s where e.sal between s.losal to s.hisal;


inner join
select * from emp e, dept d where e.deptno(+)=d.deptno;
select ename, dname from Emp e join dept c using (deptno)

Outer join
Left outer join
select ename, dname from Emp e left join dept c using (deptno)

Right outer join
select ename, dname from Emp e right join dept c using (deptno)
select * from emp e, dept d where e.deptno=d.deptno(+);

Full outer join
select ename, dname from Emp e full join dept c using (deptno)





select * from tab;

join from 3 tables

 select first_name, department_name, city from employees e 
 JOIN departments d USING (department_id)
 
 join LOCATIONS using (location_id) 
 join countries using (country_id)
 join regions using (region_id);
    
   ((((a+b)+c))+d)+e)
 
 select first_name, department_name from employees e JOIN departments d on (e.department_id=d.department_id);
 
 cross join
 select * from employees e cross join departments d;  
 
 natural join- db will decide and join baseds on common column name
 select * from employees e natural join departments d;  


select first_name, salary, job_title, job_id, min_salary, max_salary from  employees e join jobs using (job_id) order by Min_salary desc;
  select first_name, salary, job_title, job_id, min_salary+max_salary/2 as Avg_salary from  employees e join jobs using (job_id) order by Min_salary desc;
 
 
 group by
 select department_id, avg (salary) from  employees group by department_id


select min(hire_Date), max (hire_date) from Employees ;
 select department_id, min(hire_Date), max (hire_date) from Employees group by department_id;
 
 Select department_id, count(department_id) from employees group by department_id;
 select Select manager_id, count(manager_id) from employees group by manager_id; 
 
 
 List all Employees earning more Salary than average salarfy of IT DEPARTMENT; ---SUBQUERY
 
 select last_name from employees where salary> 
 (Select avg(salary) from Employees where 
 department_id in (select department_id from departments where department_name='IT'));

ANY AND ALL

SELECT LAST_NAME, SALARY FROM employees WHERE SALARY > ANY (3999, 5000)
SELECT LAST_NAME, SALARY FROM employees WHERE SALARY > ALL (3999, 5000)
SELECT LAST_NAME, SALARY FROM employees WHERE SALARY >  (3999, 5000)

X> ANY(Y,Z)
X>Y OR X>Z

X> ALL(Y,Z)
X>Y AND X>Z

X IN (Y,Z)
X=Z OR X=Y


Union

 
a,b,c,d
union
a,b,c,d,x,y
--a,b,c,d,x,y

a,b,c,d
union all
a,b,c,d,x,y
--a,a, b,b,c, c,d, d,x,y


a,b,c,d
minus
b,c,x,y
--a,d


SELECT EMPLOYEE_ID FROM eMPLOYEES
MINUS
SELECT EMPLOYEE_ID FROM JOB_HISTORY

a,b,c,d
intersect
b,c,x,y
--b,c

Union  
SELECT EMPLOYEE_ID FROM eMPLOYEES
Intersect
SELECT EMPLOYEE_ID FROM JOB_HISTORY
   
   
   
   
 DDL AND DML
 
 create table books (bookid number(4) primary key,
title varchar (30) not null,
author varchar (20) default 'Anonymous'
);

Insert into books (bookid, title) values (101, 'Head first Java');
Insert into books (bookid, title) values (102, 'Head first python');

COMMIT;
update books set author='Viral' where bookid=101;
COMMIT;

select * from books;
drop table books;



